// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                         = "zod-prisma-types"
  createOptionalDefaultValuesTypes = true
  useTypeAssertions                = true
  createInputTypes                 = false
  createRelationValuesTypes        = true
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Group {
  id String @id @default(cuid())

  ownerId    String
  groupOwner User   @relation("mygroup", fields: [ownerId], references: [id], onDelete: Cascade)
  userArray  User[]
}

model User {
  id           String  @id @default(cuid())
  name         String  @default("")
  ACCESS_TOKEN String?
  PUBLIC_TOKEN String?
  ITEM_ID      String?
  TRANSFER_ID  String? // The transfer_id is only relevant for Transfer ACH product.
  PAYMENT_ID   String? // The payment_id is only relevant for the UK/EU Payment Initiation product.

  ownedTxArray Tx[] //transactions I own
  splitTxArray Split[] @relation("splitUserArray") //Splits I am included in

  //Why is this not just a many-to-many relationship?
  myGroup    Group[] @relation("mygroup") //groups I own
  groupArray Group[] //array of groups this user is included in

  CatSettings CatSettings[]
}

//Created when a transaction is saved to the database from category modification
//or split.
//Also created when a user accepts a split from another user.
model Tx {
  id      String @id @default(cuid())
  plaidId String //plaid tranasction_id

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  //For tracking splits. Can be less than tx.amount, but is target total of catArray.amount
  userTotal Float
  catArray  Cat[]

  splitTxArray Tx[] @relation("originTx") //transactions that were split from this tx

  //If this tx was created from a split, this is the split id
  refSplit Split? @relation("refSplit")

  //the original transaction this tx was split from. null if this is the original tx
  originTxId String?
  originTx   Tx?     @relation("originTx", fields: [originTxId], references: [id], onDelete: Cascade)

  splitArray Split[] //Splits that were created from this tx
}

//Created for Bob when Alice splits their transaction with Bob.
//Bob can accept this split to create a new tx with the same amount as the split.
model Split {
  id String @id @default(cuid())

  userId String
  user   User   @relation("splitUserArray", fields: [userId], references: [id], onDelete: Cascade)

  amount Float

  //transaction associated with this split
  txId String? @unique
  tx   Tx?     @relation("refSplit", fields: [txId], references: [id], onDelete: Cascade)

  //transaction this split comes from
  originTxId String
  originTx   Tx     @relation(fields: [originTxId], references: [id], onDelete: Cascade)
}

model Cat {
  id        String   @id @default(cuid())
  name      String
  nameArray String[]
  amount    Float

  tx   Tx     @relation(fields: [txId], references: [id])
  txId String
}

model CatSettings {
  id     String @id @default(cuid())
  name   String
  budget Float

  parent   CatSettings?  @relation("SubCategory", fields: [parentId], references: [id])
  parentId String?
  children CatSettings[] @relation("SubCategory")

  User   User   @relation(fields: [userId], references: [id])
  userId String
}

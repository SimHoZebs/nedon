// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

generator json {
  provider = "prisma-json-types-generator"
  // namespace = "PrismaJson"
  // clientOutput = "<finds it automatically>"
  // (./ -> relative to schema, or an importable path to require() it)
}

enum MdsType {
  UNDETERMINED  @map("-1")
  MANDATORY
  DISCRETIONARY
  SAVING
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Group {
  id String @id @default(cuid(2))

  ownerId    String
  groupOwner User   @relation("mygroup", fields: [ownerId], references: [id], onDelete: Cascade)
  userArray  User[] @relation("groupMembers")
}

model User {
  id          String  @id @default(cuid(2))
  name        String  @default("")
  accessToken String? // Private: Do not expose to client
  publicToken String? // Private: Do not expose to client
  itemId      String? // Private: Do not expose to client
  transferId  String? // Private: Do not expose to client. The transfer_id is only relevant for Transfer ACH product.

  cursor String? //tracker for transaction updates

  ownedTxArray Tx[] //transactions I own
  splitTxs     Tx[] @relation("txSplits") //transactions I was split into

  myGroup    Group[] @relation("mygroup") //groups I own
  groupArray Group[] @relation("groupMembers") //groups I am a member of

  myConnectionArray  User[] @relation("UserConnections") //users I connected to
  connectedWithArray User[] @relation("UserConnections") //users connected to me

  settings UserSettings?
}

//Created when a transaction is saved to the database from category modification
//or split.
//Also created when a user accepts a split from another user.
model Tx {
  id String @id @default(cuid(2))

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  //the original transaction this tx was split from. null if this is the original tx
  originTxId String?
  originTx   Tx?     @relation("originTx", fields: [originTxId], references: [id], onDelete: Cascade)

  splitTxArray Tx[]   @relation("originTx") // Txs created from splits
  splitUsers   User[] @relation("txSplits") // Users this tx was split with

  //For tracking splits. Can be less than tx.amount, but is target total of catArray.amount
  userTotal Decimal @default(0) @db.Money
  catArray  Cat[]

  receipt Receipt?

  recurring Boolean @default(false)
  mds       MdsType @default(UNDETERMINED)

  //duplicate fields from plaidTx because these are important enough to manipulate
  //eventually, all plaidTx fields will be moved here
  plaidId            String?   @unique //plaid tranasction_id
  name               String
  amount             Decimal   @db.Money
  datetime           DateTime? //datetime of when tx was posted
  authorizedDatetime DateTime //datetime of when tx was authorized by user
  accountId          String?

  /// [PlaidTx]
  plaidTx Json?
}

// Ensure to match the Plaid's PFC
// Refer to https://plaid.com/docs/transactions/pfc-migration/#backfilling-historical-transactions-with-pfcs
model Cat {
  id String @id @default(cuid(2))

  amount Decimal @db.Money

  primary     String
  detailed    String
  description String

  tx   Tx     @relation(fields: [txId], references: [id], onDelete: Cascade)
  txId String
}

model UserSettings {
  id     String @id @default(cuid(2))
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  catSettings CatSettings[]
}

model CatSettings {
  id             String  @id @default(cuid(2))
  name           String
  budget         Decimal @db.Money
  userSettingsId String

  parent   CatSettings?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  parentId String?
  children CatSettings[] @relation("CategoryHierarchy")

  userSettings UserSettings @relation(fields: [userSettingsId], references: [id], onDelete: Cascade)
}

model Receipt {
  id             String        @id @default(cuid(2))
  is_receipt     Boolean
  transaction_id String
  date           DateTime
  merchant       String
  items          ReceiptItem[]
  subtotal       Decimal       @db.Money
  currency       String
  tax            Decimal       @db.Money
  tip            Decimal       @db.Money
  grand_total    Decimal       @db.Money
  payment_method String
  online_link    String
  location       String

  tx   Tx     @relation(fields: [txId], references: [id], onDelete: Cascade)
  txId String @unique
}

model ReceiptItem {
  id          String  @id @default(cuid(2))
  name        String
  description String
  quantity    Int
  unit_price  Decimal @db.Money
  mds         MdsType @default(UNDETERMINED)

  receipt   Receipt @relation(fields: [receiptId], references: [id], onDelete: Cascade)
  receiptId String
}

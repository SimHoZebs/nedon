// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Group {
  id        String @id @default(uuid())
  userArray User[]
}

model User {
  id           String  @id @default(uuid())
  ACCESS_TOKEN String?
  PUBLIC_TOKEN String?
  ITEM_ID      String?
  TRANSFER_ID  String? // The transfer_id is only relevant for Transfer ACH product.
  PAYMENT_ID   String? // The payment_id is only relevant for the UK/EU Payment Initiation product.
  groupArray   Group[]
}

model Transaction {
  transaction_id           String       @id
  account_id               String
  amount                   Float
  iso_currency_code        String?
  unofficial_currency_code String?
  category                 String[] //should be string[]|null
  category_id              String?
  check_number             Int?
  date                     String
  location                 Location?
  name                     String
  merchant_name            String?
  payment_meta             PaymentMeta?
  pending                  Boolean
  pending_transaction_id   String?
  authorized_date          String
  authorized_datetime      String
  payment_channel          String?
  account_owner            String?
}

model Location {
  transaction_id String      @unique
  transaction    Transaction @relation(fields: [transaction_id], references: [transaction_id])
  address        String?
  city           String?
  region         String?
  postal_code    String?
  country        String?
  lat            String?
  lon            String?
  store_number   String?
}

model PaymentMeta {
  transaction_id    String      @unique
  transaction       Transaction @relation(fields: [transaction_id], references: [transaction_id])
  by_order_of       String?
  payee             String?
  payer             String?
  payment_method    String?
  payment_processor String?
  ppd_id            String?
  reason            String?
  reference_number  String?
}

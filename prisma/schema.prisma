// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Group {
  id String @id @default(uuid())

  ownerId    String
  groupOwner User   @relation("mygroup", fields: [ownerId], references: [id], onDelete: Cascade)
  userArray  User[]
}

model User {
  id           String  @id @default(uuid())
  name         String  @default("")
  ACCESS_TOKEN String?
  PUBLIC_TOKEN String?
  ITEM_ID      String?
  TRANSFER_ID  String? // The transfer_id is only relevant for Transfer ACH product.
  PAYMENT_ID   String? // The payment_id is only relevant for the UK/EU Payment Initiation product.

  transactionArray Transaction[]
  splitArray       Split[] //a user can be part of a transaction split they do not own

  myGroup    Group[] @relation("mygroup") //groups I own
  groupArray Group[] //array of groups this user is included in
}

model Transaction {
  id         String  @id @default(cuid()) //transaction_id UUID for Plaid transactions, CUID for manually created transactions
  ownerId    String
  owner      User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  splitArray Split[]
}

model Category {
  id        String   @id @default(uuid())
  nameArray String[]
  amount    Float

  Split   Split  @relation(fields: [splitId], references: [id], onDelete: Cascade)
  splitId String
}

model Split {
  id String @id @default(uuid())

  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  categoryArray Category[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
